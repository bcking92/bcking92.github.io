---
layout: post
title: "[backend] JWT 로그인(유저인증) 원리"
date: 2020-1-15 00:00:00 +0300
comments: true
img: JWT.jpeg
visible: 1
description: JWT에 대해 정리해 봤습니다요
categories: Backend
tags: [Backend, JWT]
---
JWT는 JSON Web Token의 약자로 정보를 JSON 형태로 안전하게 주고 받기 위한 표준규격 입니다.
JWT는 전송 과정에서 정보의 위조나 변조가 불가능해 웹에서 유저의 로그인에 많이 사용됩니다. 먼저 JWT의 구조를 알아 봅시다.

### 구조
JWT은 XXXXXX.YYYYYY.ZZZZZZ의 형태로 구성되어 있습니다. 점(.)을 기준으로 세 부분으로 나누어져 있는데요.
- XXXXXX부분은 Header
- YYYYYY부분은 Payload
- ZZZZZZ부분은 Signature
라고 합니다.

#### Header
Header는 두 부분으로 나누어 집니다. `alg`와 `typ` 입니다.
`alg`는 해싱 알고리즘을 말합니다. 해싱 알고리즘은 Signature 부분을 만들 때 사용됩니다. Signature 부분에서 자세히 설명합니다.
`typ`은 토큰의 타입입니다.

```json
{
    "alg": "HS256",
    "typ": "JWT"
}
```
Header는 위와 같이 구성되어 있고 이것은 각각
- alg: 해싱 알고리즘을 HS256으로 하겠다.
- tye: JWT이다.
라는 뜻입니다. 이 JSON 정보는 Base64Url로 인코드 되어서 JWT의 첫번 째 부분인 Header가 됩니다.
실제로 위의 JSON 문자열을 Base64로 인코딩한 결과는 아래와 같습니다.
```
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
```

#### Payload
두 번째 파트인 Payload에는 주고 받을 정보들이 들어있습니다. 이 정보들을 각각 클레임(Claims)이라고 부릅니다. 클레임은 header와 마찬가지로 key-value 형태로 되어 있고 `registered claims`, `public claims`, `private claims` 3가지 종류가 있습니다.
- Registered claims:
  - Registered claims은 이미 기존에 정해져 있는 claims입니다. 꼭 사용해야 하는 것은 아니지만 사용하는 것이 권장됩니다. 종류는 아래와 같은 것들이 있습니다.
    - iss: 누가 토큰을 발급했는지 말합니다.
    - sub: 토큰이 무엇에 관한 것인지 말합니다.
    - aud: 누가 토큰을 수령하는지 말합니다.
    - exp: 언제 토큰이 만료되는지 말합니다.(유닉스 시간) 토큰의 만료시간이 현재보다 이전이면 JWT가 허가 되어서는 안됩니다.
    - nbf: 언제부터 토큰이 유효한지 말합니다.(유닉스 시간) 이 시간 이전에는 토큰이 허가 되어서는 안됩니다.
    - iat: 토큰을 발급한 시간을 말합니다.
    - jti: jwt의 고유한 id 입니다. jwt가 중복되는 것을 막기 위해 사용됩니다.
- Public claims
  - Public claims은 JWT를 사용하는 사람들이 마음대로 정의하여 사용할 수 있지만 [이곳](https://www.iana.org/assignments/jwt/jwt.xhtml)에 등록되어야 합니다. 같은 이름의 claim이 다른 의미로 사용되는 것을 방지하기 위함입니다. 
- Private claims
  - Private claims도 JWT를 사용하는 사람들에 의해 마음대로 정의되어 사용될 수 있습니다. Public claims와 다른 점은 Private claims는 모든 JWT 사용자에 대한 claim이 아니라 정보를 주고 받는 대상자 끼리의 약속이라는 점입니다. 그러므로 Registered claims와 Public claims에 속하지 않는 모든 claims는 Private claims 입니다.

제가 이해한 바에 따르면 claims에 대해 어떤것이 registered claims인지 public claims인지 private claims인지 강제할 수 있는 장치는 없습니다. claims의 종류는 논리적으로 구분하는 것 뿐이고 registered와 public claims는 정보를 전달할 때 약속처럼 사용되는 것입니다.

아래는 payload의 예시입니다.
```json
{
  "sub": "1234567890", # registered claim
  "name": "John Doe", # public claim
  "admin": true # private claim
}
```
마찬가지로 payload도 Base64로 인코딩 되어서 jwt의 일부분이 됩니다. Payload의 담긴 정보(claim)들은 쉽게 복호화 될 수 있습니다. 그러므로 민감한 정보는 담지 않는 것이 좋습니다. 위의 payload를 인코딩한 값은 아래와 같습니다.

```
eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ
```

#### Signature
Signature 부분은 Base64로 인코딩된 Header의 값과 Payload의 값 그리고 jwt 발급자만 알고있는 secret key를 합친 후 해싱 알고리즘으로 해싱하여 생성합니다. secrect key는 발급자만 알고 있으므로 같은 Header와 Payload 정보를 가지고 있어도 같은 Signature를 생성할 수 없으므로 같은 JWT를 만들지 못합니다. 이 때 해싱알고리즘은 Header 부분에 있었던 알고리즘을 사용합니다. 아래는 HMAC SHA256 알고리즘으로 Signature를 만드는 예시입니다.

```
HMACSHA256(
  base64UrlEncode(header) + "." +
  base64UrlEncode(payload),
  secret)
```
이 때, secret은 토큰의 발급자가 무작위로 설정할 수 있습니다. 이 때 secret 부분에 'secret'이라는 문자열을 넣고 해싱하면 

```
XbPfbIHMI6arZ3Y922BhjWgQzWXcXNrz0ogtVhfEd2o
```
아래와 같은 값이 나옵니다. 

Header와 Payload의 인코딩값과 위에서 만든 Signature를 점(.)으로 연결하면 JWT가 됩니다.
```
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.XbPfbIHMI6arZ3Y922BhjWgQzWXcXNrz0ogtVhfEd2o
```

### JWT 유저인증(로그인)
JWT로 유저를 인증하는 방법은 간단합니다.
1. 먼저 유저가 알맞은 아이디와 비밀번호를 서버로 보내면
2. 서버는 가지고 있는 Secret key를 이용해 유저정보를 담은 JWT를 만들어 유저에게 보냅니다.
3. 유저는 JWT를 http요청시 header([Authorizaion header](https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Authorization))에 담아 같이 전송합니다.
4. 서버는 유저의 요청이 올 때 마다 JWT를 가지고 있는지 확인하고 있다면 Header와 Payload 그리고 Secret key를 이용해 Signature를 만들고 비교해서 인증 절차를 거칩니다.
5. 3번 4번 계속 반복.

중간에 JWT가 탈취되어 정보가 변경 되더라도 서버쪽에서는 바로 눈치챌 수 있습니다. Signature 값이 변경되기 때문입니다. Secret key를 모른다면 같은 Signature 값을 만들어 내는 것은 (거의) 불가능 합니다.
Session 기반의 유저인증과 비교했을 때 토큰 기반의 유저인증을 사용함으로써 얻을 수 있는 몇 가지 장점이 있다고 합니다. 이 부분은 [Velopert](https://velopert.com/2350)님의 글을 참고 했습니다.

- **Secret key만 가지고 있으면 유저를 인증할 수 있기 때문에 유저의 session 정보를 서버 메모리에 저장할 필요가 없습니다.** Session 기반 인증 방식은 로그인 한 유저가 많을 경우 RAM이나 DB에 무리를 줄 수 있습니다. 
- **규모 확장성(scalability)이 뛰어납니다.** Session 기반의 로그인 방식은 서버를 확장하기 어렵습니다. 만약 여러대의 서버로 요청을 분산하여 처리하고 있다면 유저가 처음 로그인해서 Session을 생성한 서버에만 요청을 보내도록 설정해야 하기 때문입니다. 하지만 토큰을 사용한다면 어떤 서버로 요청이 가던 상관 없습니다. 그러므로 서버를 확장하기에 적합합니다.
- **보안성이 뛰어납니다.** 서버에 요청을 보낼 때 쿠키를 사용하지 않으므로 쿠키를 사용함으로 발생하는 취약점이 사라집니다.
- **서비스 확장성(extensibility)이 뛰어납니다.** 토큰을 사용하여 다른 서비스에서도 권한을 공유할 수 있습니다. 소셜로그인이 대표적인 예시입니다. 토큰 기반 유저인증에서는 토큰에 선택적인 권한만 부여할 수 있습니다. 

이외에도 [이곳](https://dooopark.tistory.com/6)에 서버 기반 인증과 토큰 기반 인증에 대한 특징이 잘 정리되어 있습니다.

---
#### 참고
https://dooopark.tistory.com/6
https://velopert.com/2350
https://jwt.io/



